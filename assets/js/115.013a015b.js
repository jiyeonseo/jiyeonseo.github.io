(window.webpackJsonp=window.webpackJsonp||[]).push([[115],{531:function(t,a,s){"use strict";s.r(a);var r=s(5),e=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"가장-빠르게-fastapi를-돌려보자-uvicorn-gunicorn-fastapi-docker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#가장-빠르게-fastapi를-돌려보자-uvicorn-gunicorn-fastapi-docker"}},[t._v("#")]),t._v(" 가장 빠르게 FastAPI를 돌려보자 - uvicorn-gunicorn-fastapi-docker")]),t._v(" "),a("p",[t._v("FastAPI 관련 라이브러리나 예제 코드들을 살펴보다보면 실행 Dockerfile 파일이 아래와 같이 시작하는 파일들을 많이 만나볼 수 있다.")]),t._v(" "),a("div",{staticClass:"language-Dockerfile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" tiangolo/uvicorn-gunicorn-fastapi")]),t._v("\n")])])]),a("p",[t._v("FastAPI를 사용한다면 tiangolo 이름부터 아주 익숙할 것이다. 맞다. 바로 FastAPI를 만든 "),a("a",{attrs:{href:"https://github.com/tiangolo",target:"_blank",rel:"noopener noreferrer"}},[t._v("Sebastián Ramírez"),a("OutboundLink")],1),t._v("가 FastAPI용 base docker image다. Python 3.6 이상의 버전들을 모두 제공하고 있으며 "),a("code",[t._v("-slim")]),t._v(" (ex. "),a("code",[t._v("python3.8-slim")]),t._v(") 과 같이 Alpine Linux 버전 역시 제공하고 있으니 뭘 좋아하든 골라 사용하기 좋다.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("GitHub repo")]),t._v(": "),a("a",{attrs:{href:"https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("strong",[t._v("Docker Hub image")]),t._v(": "),a("a",{attrs:{href:"https://hub.docker.com/r/tiangolo/uvicorn-gunicorn-fastapi/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://hub.docker.com/r/tiangolo/uvicorn-gunicorn-fastapi/"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("아마 FastAPI를 한번이라도 사용해 본 사람이라면 이미 "),a("code",[t._v("uvicorn main:app --reload")]),t._v(" 시작이 아마 익숙할 것이다. 이 베이스 이미지에서는 여기서 하나 더 추가 되었다.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.uvicorn.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Uvicorn"),a("OutboundLink")],1),t._v(' : lightning-fast "ASGI" server. 비동기 파이썬 웹 서버. 단일 process.')]),t._v(" "),a("li",[a("a",{attrs:{href:"https://gunicorn.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Gunicorn"),a("OutboundLink")],1),t._v(" : WSGI(Web Server Gateway Interface). 여기서는 여러 Uvicorn 워커 프로세스를 매니지하는 용도로 사용된다.")])]),t._v(" "),a("p",[t._v('Uvicorn + Gunicorn 로 서버 리소스(CPU 코어 갯수)에 적합한 워커 구성을 해주며 FastAPI가 바로 사용할 수 있는 Base Image가 바로 "uvicorn-gunicorn-fastapi-docker" 이다.')]),t._v(" "),a("h2",{attrs:{id:"쓰면-좋은-경우"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#쓰면-좋은-경우"}},[t._v("#")]),t._v(" 쓰면 좋은 경우")]),t._v(" "),a("ul",[a("li",[t._v("프로세스 수 조정을 크게 신경 쓰지 않아도 되는 간단한 앱.")]),t._v(" "),a("li",[t._v("클러스터가 아닌 단일 서버에서 실행하는 경우.")]),t._v(" "),a("li",[t._v("단일 서버에 Docker Compose로 배포하여 컨테이너 내에서 Gunicorn + Uvicorn 조합으로 사용하는 경우.")]),t._v(" "),a("li",[t._v("프로메테우스와 같은 모니터링 메트릭을 가져오는 경우, 하나의 컨테이너 + 여러 프로세스 조합으로 한번에 사용하는게 간단할 수 있음.")])]),t._v(" "),a("h2",{attrs:{id:"안-써도-되는-경우-prod-배포의-경우"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#안-써도-되는-경우-prod-배포의-경우"}},[t._v("#")]),t._v(" 안 써도 되는 경우 (Prod 배포의 경우)")]),t._v(" "),a("p",[t._v("위에서 언급한 바와 같이 편하게 사용하라고 만든 것임으로 꼭 써야하는 것은 아니다. 오히려, 해당 Repo REAME에서부터 "),a("strong",[t._v("WARNING")]),t._v(' 까지 붙혀가며, 꼭 써야하는 것은 아니니 유의 당부를 하고 있다. "그냥 직접 만들어 쓰는게 오히려 나을 수도 있다." 라고 말하고 있는데, 그 큰 이유중의 하나는 worker의 수 때문이다.')]),t._v(" "),a("p",[a("code",[t._v("uvicorn-gunicorn-fastapi-docker")]),t._v(" 는 "),a("a",{attrs:{href:"https://github.com/tiangolo/uvicorn-gunicorn-docker/blob/master/docker-images/gunicorn_conf.py#L21-L30",target:"_blank",rel:"noopener noreferrer"}},[t._v("내부적으로 자동으로 process와 worker 수를 자동으로 조절해주고 있다."),a("OutboundLink")],1),t._v('  CPU 자원 상태를 체크하고 이에 알맞는 값을 계산해준다. 위에서 말한 "쓰면 좋은 경우"에서 반복되는 단일 서버나 단일 컨테이너로 띄울 때 좋은 이유가 여기에 있다. 떠 있는 환경에서 가장 적합한 갯수를 알아서 계산해 줄 테니 우리는 비지니스 로직에만 신경쓰면 된다.')]),t._v(" "),a("p",[t._v("하지만 리얼 월드에서는 이 자동 튜닝 부분이 적합하지 않을 수도 있다. Docker를 사용하게 되면 단일로 띄우기 보다는 Kubernetes와 같은 컨테이너 오케스트레이션을 이용하여 클러스터에 여러개의 Pod으로 띄우는 경우가 대다수다. 즉, 클러스터 레벨에서 몇 개의 앱을 띄울 것인가가 관리된다. 이 때 각각의 컨테이너 내에서 Gunicorn + Uvicorn 으로 여러 워커 + 프로세스 매니저를 사용할 경우, 이 리소스 관리가 아주 복잡해 질 수 있다.")]),t._v(" "),a("p",[t._v("따라서, 클러스터를 이용한 배포 및 운영을 하고 있다면 단일 Uvicorn process를 사용하는 것을 권장하고 있다. "),a("a",{attrs:{href:"https://fastapi.tiangolo.com/deployment/docker/#replication-number-of-processes",target:"_blank",rel:"noopener noreferrer"}},[t._v("더 자세한 내용은 공식 문서"),a("OutboundLink")],1),t._v("에서도 찾아 볼 수 있다.")]),t._v(" "),a("p",[t._v("이 경우 아래와 같이 기본 python 이미지를 사용하고, "),a("code",[t._v("uvicorn")]),t._v(" 만을 사용하여 서버를 띄우면 된다.")]),t._v(" "),a("div",{staticClass:"language-dockerfile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" python:3.9")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WORKDIR")]),t._v(" /code")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" ./requirements.txt /code/requirements.txt")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" pip install --no-cache-dir --upgrade -r /code/requirements.txt")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Copy the main.py file to the /code directory directly (without any ./app directory).")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" ./main.py /code/")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Run Uvicorn and tell it to import the app object from main (instead of importing from app.main).")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CMD")]),t._v(" ["),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"uvicorn"')]),t._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"main:app"')]),t._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"--host"')]),t._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0.0.0.0"')]),t._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"--port"')]),t._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"80"')]),t._v("]")]),t._v("\n")])])]),a("h2",{attrs:{id:"사용-방법"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#사용-방법"}},[t._v("#")]),t._v(" 사용 방법")]),t._v(" "),a("div",{staticClass:"language-dockerfile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" tiangolo/uvicorn-gunicorn:python3.9")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" ./requirements.txt /app/requirements.txt")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" pip install --no-cache-dir --upgrade -r /app/requirements.txt")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" ./app /app")]),t._v("\n")])])]),a("p",[t._v("위 경우 "),a("code",[t._v("/app/app/main.py")]),t._v(" 혹은 "),a("code",[t._v("/app/main.py")]),t._v(" 에 있는 "),a("code",[t._v("app")]),t._v("을 실행하게 되니 파일 위치를 유의하자.\n그 다음 docker build 그리고 run 해준다.")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" build "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-t")]),t._v(" myimage ./\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-d")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--name")]),t._v(" mycontainer "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-p")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),t._v(":80 myimage\n")])])]),a("p",[t._v("제대로 잘 떳다면 "),a("a",{attrs:{href:"http://localhost:8080",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://localhost:8080"),a("OutboundLink")],1),t._v(" 에 접속될 것이다.")]),t._v(" "),a("p",[t._v("만약 패키지 관리툴 Poetry를 사용한다면 아래와 같이 Poetry 설치 및 패키지 설치를 해주면 된다.")]),t._v(" "),a("div",{staticClass:"language-Dockerfile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" tiangolo/uvicorn-gunicorn-fastapi:python3.8")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WORKDIR")]),t._v(" /app")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Install Poetry")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" curl -sSL https://install.python-poetry.org | POETRY_HOME=/opt/poetry python && "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n    cd /usr/local/bin && "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n        ln -s /opt/poetry/bin/poetry && "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n            poetry config virtualenvs.create false")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" ./pyproject.toml ./poetry.lock* /app/")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" bash -c "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"poetry install --no-root"')])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" ./app /app")]),t._v("\n")])])]),a("h3",{attrs:{id:"다른-dependency들과-함께-docker-compose로-실행하기"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#다른-dependency들과-함께-docker-compose로-실행하기"}},[t._v("#")]),t._v(" 다른 dependency들과 함께 Docker Compose로 실행하기")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3.8'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("services")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("redis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" redislabs/redismod\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"16379:6379"')]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("volumes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" $PWD/data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("/data\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("command")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("dir /data "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("loadmodule /usr/lib/redis/modules/redistimeseries.so\n\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("app")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("restart")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" always\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("build")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" .\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"8080:80"')]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("volumes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" $PWD/app"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("/app\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("depends_on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" redis\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("command")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" /start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("reload.sh\n")])])]),a("p",[t._v("Default는 "),a("a",{attrs:{href:"https://github.com/tiangolo/uvicorn-gunicorn-docker/blob/master/docker-images/start.sh",target:"_blank",rel:"noopener noreferrer"}},[t._v("start.sh"),a("OutboundLink")],1),t._v("로 바로 run 되는 것으로 되어있으나, 개발 할때는  "),a("a",{attrs:{href:"https://github.com/tiangolo/uvicorn-gunicorn-docker/blob/master/docker-images/start-reload.sh",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("start-reload.sh")]),a("OutboundLink")],1),t._v("을 사용하여 코드 변경이 있을 때 마다 자동으로 리로드 될 수 있도록 하는 것이 편하다. 만약 위처럼 docker-compose가 아닌 그냥 "),a("code",[t._v("docker run")]),t._v(" 사용시에는 아래와 같이 사용하면 된다.")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-d")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-p")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v(":80 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-v")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("pwd")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v(":/app myimage /start-reload.sh\n")])])]),a("ul",[a("li",[t._v("(주의) reload에서는 Gunicorn으로 뜨지않기 때문에 만일 custom gunicorn 설정 파일을 사용한다면, reload에서는 반영되지 않는다.")])]),t._v(" "),a("h2",{attrs:{id:"환경변수"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#환경변수"}},[t._v("#")]),t._v(" 환경변수")]),t._v(" "),a("p",[t._v("기본적인 것들을 많이 제공하면서도 커스텀하게 필요한 부분들도 환경변수로 적절히 넣어줄 수 있다. 코드 폴더 구성이 다르거나, 워커의 수만 변경하고 싶을때, 최대 워커 수를 고정 시키고 싶은 경우 등.")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("APP_MODULE")])]),t._v(" "),a("li",[a("code",[t._v("VARIABLE_NAME")])]),t._v(" "),a("li",[a("code",[t._v("APP_MODULE")])]),t._v(" "),a("li",[a("code",[t._v("GUNICORN_CONF")])]),t._v(" "),a("li",[a("code",[t._v("WORKERS_PER_CORE")])]),t._v(" "),a("li",[a("code",[t._v("MAX_WORKERS")])]),t._v(" "),a("li",[a("code",[t._v("WEB_CONCURRENCY")])]),t._v(" "),a("li",[a("code",[t._v("HOST")])]),t._v(" "),a("li",[a("code",[t._v("PORT")])]),t._v(" "),a("li",[a("code",[t._v("BIND")])]),t._v(" "),a("li",[a("code",[t._v("LOG_LEVEL")])]),t._v(" "),a("li",[a("code",[t._v("WORKER_CLASS")])]),t._v(" "),a("li",[a("code",[t._v("TIMEOUT")])]),t._v(" "),a("li",[a("code",[t._v("KEEP_ALIVE")])]),t._v(" "),a("li",[a("code",[t._v("GRACEFUL_TIMEOUT")])]),t._v(" "),a("li",[a("code",[t._v("ACCESS_LOG")])]),t._v(" "),a("li",[a("code",[t._v("ERROR_LOG")])]),t._v(" "),a("li",[a("code",[t._v("GUNICORN_CMD_ARGS")])]),t._v(" "),a("li",[a("code",[t._v("PRE_START_PATH")])])]),t._v(" "),a("p",[t._v("자세한 사용 방법은 "),a("a",{attrs:{href:"https://github.com/tiangolo/uvicorn-gunicorn-docker#environment-variables",target:"_blank",rel:"noopener noreferrer"}},[t._v("여기"),a("OutboundLink")],1),t._v("서 확인해 볼 수 있다.")]),t._v(" "),a("h2",{attrs:{id:"custom-gunicorn-설정-파일"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#custom-gunicorn-설정-파일"}},[t._v("#")]),t._v(" Custom Gunicorn 설정 파일")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tiangolo/uvicorn-gunicorn-docker/blob/master/docker-images/gunicorn_conf.py",target:"_blank",rel:"noopener noreferrer"}},[t._v("기본으로 설정된 Gunicorn 파일이 있다."),a("OutboundLink")],1),t._v(" 다음과 같은 path에 추가하면 override 되니 필요한 부분이 있으면 커스터마이즈도 가능하다.")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("/app/gunicorn_conf.py")])]),t._v(" "),a("li",[a("code",[t._v("/app/app/gunicorn_conf.py")])]),t._v(" "),a("li",[a("code",[t._v("/gunicorn_conf.py")])])]),t._v(" "),a("h2",{attrs:{id:"custom-app-prestart-sh"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#custom-app-prestart-sh"}},[t._v("#")]),t._v(" Custom  "),a("code",[t._v("/app/prestart.sh")])]),t._v(" "),a("p",[t._v("app 시작 전, 필요한 작업을 스크립트 처리할 수도 있다. 많이 사용 예로는 Alembic을 이용한 SQL migration 역시도 가능하다.")]),t._v(" "),a("p",[t._v("예를 들어, 아래와 같은 스크립트를 "),a("code",[t._v("./app/prestart.sh")]),t._v(" 에 만든다. (혹은 "),a("code",[t._v("PRE_START_PATH")]),t._v("로 위치를 변수로 넘겨 줄 수도 있다.)")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[t._v("#! /usr/bin/env bash")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Let the DB start")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Run migrations")]),t._v("\nalembic upgrade "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("head")]),t._v("\n")])])]),a("p",[t._v("(대략 DB 뜨는 시간)10초를 기다린 후, alembic 커맨드를 실행한다. 그 후 앱이 구동 된다.")]),t._v(" "),a("h2",{attrs:{id:"references"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[t._v("#")]),t._v(" References")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/tiangolo/uvicorn-gunicorn-docker",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/tiangolo/uvicorn-gunicorn-docker"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://fastapi.tiangolo.com/deployment/docker/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://fastapi.tiangolo.com/deployment/docker/"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=e.exports}}]);